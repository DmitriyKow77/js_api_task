{
  "stats": {
    "suites": 3,
    "tests": 12,
    "passes": 9,
    "pending": 0,
    "failures": 3,
    "start": "2022-03-31T15:01:15.316Z",
    "end": "2022-03-31T15:01:22.317Z",
    "duration": 7001,
    "testsRegistered": 12,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "warning",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "1873fef7-2964-46ff-afd0-55d522d2c157",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "b6faa318-a542-4842-bf0c-f3470e2cc93b",
        "title": "Get Reports",
        "fullFile": "/Users/dimakov/Documents/projects/js-api-task/js_api_task/specs/autoExersiseTest.js",
        "file": "/specs/autoExersiseTest.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "54e957da-d4ab-41a3-8cec-e5ed80ee2246",
            "title": "Basic Sanity Test",
            "fullFile": "/Users/dimakov/Documents/projects/js-api-task/js_api_task/specs/autoExersiseTest.js",
            "file": "/specs/autoExersiseTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Verify GET method of test endpoint",
                "fullTitle": "Get Reports Basic Sanity Test Verify GET method of test endpoint",
                "timedOut": false,
                "duration": 831,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "currentResponse = await Send_request(testData);\nexpect(currentResponse.status).to.equal(200, `Body error is: \"${currentResponse.data}\"`);\n\ncurrentResponseBody = JSON.parse(JSON.stringify(currentResponse.data));\nexpect(currentResponseBody).to.have.length.above(0);\nlet fistResult = currentResponseBody[0];\nexpect(fistResult).to.be.an('object');\nexpect(fistResult).to.have.property(\"main_key\").to.be.a('string');\nexpect(fistResult).to.have.property(\"value\").to.be.a('number');",
                "err": {
                  "message": "AssertionError: expected '1' to be a number",
                  "estack": "AssertionError: expected '1' to be a number\n    at Context.<anonymous> (specs/autoExersiseTest.js:27:64)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)"
                },
                "isRoot": false,
                "uuid": "28784cf4-8b96-4725-8ec6-580f2f23d0ba",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "28784cf4-8b96-4725-8ec6-580f2f23d0ba"
            ],
            "pending": [],
            "skipped": [],
            "duration": 831,
            "root": false,
            "rootEmpty": false,
            "_timeout": 30000
          },
          {
            "uuid": "9c936e47-d7f4-48eb-811a-fe3bfaa597d0",
            "title": "Functional Tests",
            "fullFile": "/Users/dimakov/Documents/projects/js-api-task/js_api_task/specs/autoExersiseTest.js",
            "file": "/specs/autoExersiseTest.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "Verify PUT method of test endpoint",
                "fullTitle": "Get Reports Functional Tests Verify PUT method of test endpoint",
                "timedOut": false,
                "duration": 608,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "testData.method = \"put\";\ntestData.body = {\"main_key\": \"Dmitriy\", \"value\": 7};\ncurrentResponse = await Send_request(testData);\ncurrentResponseBody = JSON.parse(JSON.stringify(currentResponse.data));\nexpect(currentResponse.status).to.equal(200, `Body error is: \"${currentResponseBody}\"`);\nexpect(currentResponseBody.main_key).to.equal(testData.body.main_key);\nexpect(currentResponseBody.value).to.equal(testData.body.value);",
                "err": {},
                "isRoot": false,
                "uuid": "dd6fd814-61df-47d9-a87e-5fa21c67682a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "PUT request negative test for missing key",
                "fullTitle": "Get Reports Functional Tests PUT request negative test for missing key",
                "timedOut": false,
                "duration": 881,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "testData.method = \"put\";\ntestData.body = {\"value\": 7};\ncurrentResponse = await Send_request(testData);\ncurrentResponseBody = JSON.parse(JSON.stringify(currentResponse.data));\nexpect(currentResponse.status).to.equal(400, `Body error is: \"${currentResponseBody}\"`);",
                "err": {},
                "isRoot": false,
                "uuid": "41a43005-6576-4a79-ab85-54d2bbc32043",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "PUT request negative test for missing value",
                "fullTitle": "Get Reports Functional Tests PUT request negative test for missing value",
                "timedOut": false,
                "duration": 461,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "testData.method = \"put\";\ntestData.body = {\"main_key\": \"Dmitriy\"};\ncurrentResponse = await Send_request(testData);\ncurrentResponseBody = JSON.parse(JSON.stringify(currentResponse.data));\nexpect(currentResponse.status).to.equal(400, `Body error is: \"${currentResponseBody}\"`);",
                "err": {},
                "isRoot": false,
                "uuid": "b557cec4-2964-49b2-8703-ae59033db5cb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "PUT request negative test for empty body",
                "fullTitle": "Get Reports Functional Tests PUT request negative test for empty body",
                "timedOut": false,
                "duration": 616,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "testData.method = \"put\";\ntestData.body = {};\ncurrentResponse = await Send_request(testData);\ncurrentResponseBody = JSON.parse(JSON.stringify(currentResponse.data));\nexpect(currentResponse.status).to.equal(400, `Body error is: \"${currentResponseBody}\"`);",
                "err": {},
                "isRoot": false,
                "uuid": "d79eda70-a26e-48d6-b604-05ba9ef2aa2c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Verify POST method of test endpoint",
                "fullTitle": "Get Reports Functional Tests Verify POST method of test endpoint",
                "timedOut": false,
                "duration": 595,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "testData.method = \"post\";\ntestData.body = {\"main_key\": \"Dmitriy\", \"value\": 33};\ncurrentResponse = await Send_request(testData);\ncurrentResponseBody = JSON.parse(JSON.stringify(currentResponse.data));\nexpect(currentResponse.status).to.equal(200, `Body error is: \"${currentResponseBody}\"`);\nexpect(currentResponseBody.main_key).to.equal(testData.body.main_key);\nexpect(currentResponseBody.value).to.equal(testData.body.value);",
                "err": {},
                "isRoot": false,
                "uuid": "60db39ce-c57e-4852-8b7c-847aa02d8fa1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "POST request negative test for missing key",
                "fullTitle": "Get Reports Functional Tests POST request negative test for missing key",
                "timedOut": false,
                "duration": 539,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "testData.method = \"post\";\ntestData.body = {\"main_key\": \"\", \"value\": 33};\ncurrentResponse = await Send_request(testData);\ncurrentResponseBody = JSON.parse(JSON.stringify(currentResponse.data));\nexpect(currentResponse.status).to.equal(400, `Body error is: \"${currentResponseBody}\"`);",
                "err": {},
                "isRoot": false,
                "uuid": "a46380a5-5d35-462a-b41a-33835e6ae1b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "POST request negative test for missing value",
                "fullTitle": "Get Reports Functional Tests POST request negative test for missing value",
                "timedOut": false,
                "duration": 494,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "testData.method = \"post\";\ntestData.body = {\"main_key\": \"Dmitriy\"};\ncurrentResponse = await Send_request(testData);\ncurrentResponseBody = JSON.parse(JSON.stringify(currentResponse.data));\nexpect(currentResponse.status).to.equal(400, `Body error is: \"${currentResponseBody}\"`);",
                "err": {},
                "isRoot": false,
                "uuid": "ced89b38-a36c-4928-af71-0a83e21b07a9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "POST request negative test for empty value",
                "fullTitle": "Get Reports Functional Tests POST request negative test for empty value",
                "timedOut": false,
                "duration": 463,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "testData.method = \"post\";\ntestData.body = {};\ncurrentResponse = await Send_request(testData);\ncurrentResponseBody = JSON.parse(JSON.stringify(currentResponse.data));\nexpect(currentResponse.status).to.equal(400, `Body error is: \"${currentResponseBody}\"`);",
                "err": {},
                "isRoot": false,
                "uuid": "74e19285-4c2e-4c18-be83-87fef2290340",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Verify DELETE method of test endpoint with existing data",
                "fullTitle": "Get Reports Functional Tests Verify DELETE method of test endpoint with existing data",
                "timedOut": false,
                "duration": 545,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "testData.method = \"delete\";\ntestData.body = {\"main_key\": \"Dmitriy\"};\ncurrentResponse = await Send_request(testData);\ncurrentResponseBody = JSON.parse(JSON.stringify(currentResponse.data));\nexpect(currentResponse.status).to.equal(200, `Body error is: \"${currentResponseBody}\"`);\nexpect(currentResponseBody.main_key).to.equal(testData.body.main_key);\nexpect(currentResponseBody.value).to.equal(testData.body.value);",
                "err": {},
                "isRoot": false,
                "uuid": "35e1039c-01a4-41d1-8f46-d42257b75fd0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Verify DELETE method of test endpoint with NOT valid data",
                "fullTitle": "Get Reports Functional Tests Verify DELETE method of test endpoint with NOT valid data",
                "timedOut": false,
                "duration": 524,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "testData.method = \"delete\";\ntestData.body = {\"main_key\": \"Not_existing\"};\ncurrentResponse = await Send_request(testData);\ncurrentResponseBody = JSON.parse(JSON.stringify(currentResponse.data));\nexpect(currentResponse.status).to.equal(400, `Body is: \"${JSON.stringify(currentResponseBody)}\", but expected to get error code`);",
                "err": {
                  "message": "AssertionError: Body is: \"{\"main_key\":\"Not_existing\"}\", but expected to get error code: expected 200 to equal 400",
                  "estack": "AssertionError: Body is: \"{\"main_key\":\"Not_existing\"}\", but expected to get error code: expected 200 to equal 400\n    at Context.<anonymous> (specs/autoExersiseTest.js:130:46)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                  "diff": "- 200\n+ 400\n"
                },
                "isRoot": false,
                "uuid": "d2c5490a-f387-4a0c-8ae4-814e203ff9c3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "Verify calling Non Existent endpoint",
                "fullTitle": "Get Reports Functional Tests Verify calling Non Existent endpoint",
                "timedOut": false,
                "duration": 425,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "testData.apiUrl = testData.apiUrl + \"_non_existing\";\ncurrentResponse = await Send_request(testData);\nexpect(currentResponse.status).to.equal(404, `Expected to get 404 error for not eixisting url ${testData.apiUrl}`);",
                "err": {
                  "message": "AssertionError: Expected to get 404 error for not eixisting url https://l761dniu80.execute-api.us-east-2.amazonaws.com/default/exercise_api_non_existing: expected 403 to equal 404",
                  "estack": "AssertionError: Expected to get 404 error for not eixisting url https://l761dniu80.execute-api.us-east-2.amazonaws.com/default/exercise_api_non_existing: expected 403 to equal 404\n    at Context.<anonymous> (specs/autoExersiseTest.js:137:46)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                  "diff": "- 403\n+ 404\n"
                },
                "isRoot": false,
                "uuid": "e4e4f58f-a959-4b3a-a19d-15cad97aba0f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dd6fd814-61df-47d9-a87e-5fa21c67682a",
              "41a43005-6576-4a79-ab85-54d2bbc32043",
              "b557cec4-2964-49b2-8703-ae59033db5cb",
              "d79eda70-a26e-48d6-b604-05ba9ef2aa2c",
              "60db39ce-c57e-4852-8b7c-847aa02d8fa1",
              "a46380a5-5d35-462a-b41a-33835e6ae1b6",
              "ced89b38-a36c-4928-af71-0a83e21b07a9",
              "74e19285-4c2e-4c18-be83-87fef2290340",
              "35e1039c-01a4-41d1-8f46-d42257b75fd0"
            ],
            "failures": [
              "d2c5490a-f387-4a0c-8ae4-814e203ff9c3",
              "e4e4f58f-a959-4b3a-a19d-15cad97aba0f"
            ],
            "pending": [],
            "skipped": [],
            "duration": 6151,
            "root": false,
            "rootEmpty": false,
            "_timeout": 30000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 30000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2022
}